version: '3.8'

services:
  # Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: ssl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl-snippets:/etc/nginx/ssl-snippets:ro
      - /opt/ssl/certs:/opt/ssl/certs:ro
      - /var/www/html/.well-known:/var/www/html/.well-known:rw
      - nginx-logs:/var/log/nginx
    depends_on:
      - email-app
    networks:
      - ssl-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SSL Certificate Manager (Sidecar)
  ssl-manager:
    build:
      context: ./scripts
      dockerfile: Dockerfile.ssl-manager
    container_name: ssl-manager
    restart: unless-stopped
    environment:
      - SSL_CERTS_DIR=/opt/ssl/certs
      - NGINX_CONFIG_DIR=/etc/nginx/conf.d
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL:-admin@example.com}
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL:-admin@example.com}
      - DOCKER_ENABLED=true
      - DOCKER_NGINX_CONTAINER=ssl-nginx
      - DOCKER_APP_CONTAINER=ssl-email-app
    volumes:
      - /opt/ssl:/opt/ssl:rw
      - ./nginx/conf.d:/etc/nginx/conf.d:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/www/html/.well-known:/var/www/html/.well-known:rw
      - ssl-logs:/var/log/ssl
    depends_on:
      - nginx
      - email-app
    networks:
      - ssl-network

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: enterprise-email-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root123456
      MYSQL_DATABASE: enterprise_email
      MYSQL_USER: email_user
      MYSQL_PASSWORD: email_password_123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - email-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: enterprise-email-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - email-network

  # 后端应用 (with SSL support)
  email-app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ssl-email-app
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: mysql
      DB_USERNAME: email_user
      DB_PASSWORD: email_password_123
      REDIS_HOST: redis
      # SSL Configuration
      SSL_CERTS_DIRECTORY: /opt/ssl/certs
      SSL_NGINX_CONFIG: /etc/nginx/conf.d
      SSL_AUTO_RENEWAL_ENABLED: "true"
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
    volumes:
      - backend_logs:/app/logs
      - email_storage:/data/emails
      - /opt/ssl:/opt/ssl:rw
    networks:
      - ssl-network
      - email-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: enterprise-email-frontend
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - email-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: enterprise-email-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - email-network

volumes:
  mysql_data:
  redis_data:
  backend_logs:
  email_storage:
  # SSL-related volumes
  nginx-logs:
    driver: local
  ssl-logs:
    driver: local

networks:
  email-network:
    driver: bridge
  # SSL-specific network
  ssl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16